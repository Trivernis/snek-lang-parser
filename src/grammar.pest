file = {
    SOI ~ MLF ~ (statement ~ MLF)* ~ EOI
}

statement  =  { (decl | type_decl | expr) ~ TERMINATE }
decl       =  { "let" ~ #name = ident ~ #args = (ident)* ~ #type = type_annot? ~ "=" ~ MLF ~ expr }
block      =  { "{" ~ MLF ~ block_line ~ MLF ~ "}" }
block_line = _{ expr | (statement ~ MLF)* }

// expressions

expr       =  { infix_expr | call_expr | if | term }
if         =  { "if" ~ #predicate = expr ~ "then" ~ MLF ~ #then = expr ~ (MLF ~ "else" ~ MLF ~ #else = expr)? }
term       = _{ ident | literal | "(" ~ MLF ~ expr ~ MLF ~ ")" | block }
call_expr  =  {
    #name = ident ~ #args = (term)+
}
infix_expr =  {
    #lhs = term ~ operator ~ #rhs = (infix_expr | term)
}
operator   =  { "+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "==" | "!=" }

ident         = @{ SYM_ANY_CASE | quoted_indent }
quoted_indent = _{ "`" ~ (!"`" ~ ANY)+ ~ "`" }

// types

type_annot = { ":" ~ type_expr }

type_decl =  { "type" ~ #name = type_ident ~ "=" ~ type_expr }
type_expr =  { func | type_term | type_ident }
type_term = _{ tuple | rec | enum | type_ident }

tuple       =  { "#(" ~ MLF ~ (tuple_entry ~ SEPARATE)* ~ MLF ~ tuple_entry? ~ ")" }
tuple_entry = _{ type_expr ~ MLF }

rec       = { "{" ~ MLF ~ (rec_field ~ SEPARATE ~ MLF)* ~ rec_field? ~ MLF ~ "}" }
rec_field = { #field_name = ident ~ ":" ~ #field_type = type_expr* }

enum     = { "(" ~ MLF ~ ("|" ~ enum_vrt ~ MLF)* ~ "|"? ~ MLF ~ ")" }
enum_vrt = { #vrt_name = ident ~ type_expr? }

func = { type_term ~ "->" ~ type_expr }

type_ident =  { #name = type_name ~ #args = (type_arg)* }
type_name  = @{ SYM_PASCAL_CASE }
type_arg   = @{ SYM_CAMEL_CASE }

// match patterns that destructure a variant
// TODO: copy it for declarations where destructuring can only be done into one variant

pattern                  = _{ tuple_pattern | rec_pattern | enum_pattern | #var_name = ident }
tuple_pattern            =  { "#(" ~ MLF ~ (pattern ~ MLF)+ ~ ")" }
rec_pattern              =  { "{" ~ MLF ~ (rec_pattern_field ~ MLF)+ ~ "}" }
rec_pattern_field        =  { #var_name = ident | rec_pattern_mapped_field ~ TERMINATE }
rec_pattern_mapped_field = _{ #field_name = ident ~ ":" ~ pattern }
enum_pattern             =  { #vrt = ident ~ pattern+ }

// values

literal = { quoted_string | number | boolean | char }

quoted_string = _{ "\"" ~ string ~ "\"" }
string        =  { (!"\"" ~ ANY)* }
char          =  { "'" ~ !"'" ~ ANY ~ "'" }
boolean       = @{ "true" | "false" }

// numeric values

number  = _{ byte | float | integer }
integer = @{ "-"? ~ ASCII_DIGIT+ }
float   = @{
    "-"? ~ (ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* | ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+)
}
byte    = @{ "0x" ~ ASCII_HEX_DIGIT{1, 2} | "0b" ~ ASCII_BIN_DIGIT{0, 8} }

// utils

SYM_ANY_CASE    = @{ !KEYWORD ~ ASCII_ALPHA ~ (ALPHABETIC | NUMBER | "_")* }
SYM_PASCAL_CASE = @{ !KEYWORD ~ ASCII_ALPHA_UPPER ~ (ALPHABETIC | NUMBER | "_")* }
SYM_CAMEL_CASE  = @{ !KEYWORD ~ ASCII_ALPHA_LOWER ~ (ALPHABETIC | NUMBER | "_")* }

KEYWORD   = _{ "let" | "enum" | "if" | "then" | "else" }
TERMINATE = _{ LF | EOI | ";" }
SEPARATE  = _{ LF | EOI | "," }
MLF       = _{ (LF)* }
LF        = _{ "\n" | "\r" }

WHITESPACE = _{ " " | "\t" }
COMMENT    = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
