file = {
    SOI ~ MLF ~ (statement ~ MLF)* ~ EOI
}

statement  =  { (decl | type_decl | expr) ~ TERMINATE }
decl       =  { "let" ~ #name = ident ~ #args = (ident)* ~ #type = type_annot? ~ "=" ~ expr }
block      =  { "{" ~ MLF ~ block_line ~ MLF ~ "}" }
block_line = _{ expr | (statement ~ MLF)* }

type_annot = { ":" ~ type_expr }

type_decl =  { "type" ~ #name = type_ident ~ "=" ~ type_expr }
type_expr =  { func | type_term | type_ident }
type_term = _{ tuple | rec | enum | type_ident }

tuple       =  { "#(" ~ MLF ~ tuple_entry* ~ MLF ~ ")" }
tuple_entry = _{ type_expr ~ MLF }

rec       = { "rec" ~ "{" ~ MLF ~ (rec_field ~ TERMINATE ~ MLF)* ~ rec_field? ~ MLF ~ "}" }
rec_field = { #field_name = ident ~ ":" ~ #field_type = type_expr* }

enum     = { "enum" ~ "{" ~ MLF ~ (enum_vrt ~ TERMINATE ~ MLF)* ~ enum_vrt? ~ "}" }
enum_vrt = { #vrt_name = ident ~ type_expr? }

func = { type_term ~ "->" ~ type_expr }

type_ident = ${ #name = ident ~ #args = type_args? }
type_args  =  { "<" ~ MLF ~ type_ident* ~ MLF ~ ">" }

expr       =  { infix_expr | call_expr | term }
term       = _{ ident | literal | "(" ~ MLF ~ expr ~ MLF ~ ")" | block }
call_expr  =  {
    #name = ident ~ #args = (term)+
}
infix_expr =  {
    #lhs = term ~ operator ~ #rhs = expr
}

operator = { "+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "==" | "!=" }

ident         = @{ !KEYWORD ~ ALPHABETIC ~ (ALPHABETIC | NUMBER | "_")* | quoted_indent }
quoted_indent = _{ "`" ~ (!"`" ~ ANY)+ ~ "`" }

literal = { string | number | boolean | char }

string  =  { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
char    =  { "'" ~ !"'" ~ ANY ~ "'" }
number  = _{ byte | float | integer }
integer = @{ "-"? ~ ASCII_DIGIT+ }
float   = @{
    "-"? ~ (ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* | ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+)
}
byte    = @{ "0x" ~ ASCII_HEX_DIGIT{1, 2} | "0b" ~ ASCII_BIN_DIGIT{0, 8} }
boolean = @{ "true" | "false" }

KEYWORD   = _{ "let" | "rec" | "enum" }
TERMINATE = _{ LF | EOI | ";" }
MLF       = _{ (LF)* }
LF        = _{ "\n" | "\r" }

WHITESPACE = _{ " " | "\t" }
COMMENT    = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
