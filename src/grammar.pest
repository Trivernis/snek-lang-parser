file = { "hello world" }

block      =  { "{" ~ MLF ~ block_line ~ MLF ~ "}" }
block_line = _{ expr | (statement ~ MLF)* }
statement  =  { (decl | type_decl | expr) ~ TERMINATE }
decl       =  { "let" ~ #name = ident ~ #args = (ident)* ~ "=" ~ expr }

type_decl  =  { "type" ~ #name = type_ident ~ "=" ~ type_expr }
type_expr  =  { tuple | type_ident }
tuple      =  { "#(" ~ type_expr* ~ ")" }
type_ident = ${ #name = ident ~ #args = type_args? }
type_args  =  { "<" ~ type_ident* ~ ">" }

expr       =  { infix_expr | call_expr | term }
term       = _{ ident | literal | "(" ~ MLF ~ expr ~ MLF ~ ")" | block }
call_expr  =  {
    #name = ident ~ #args = (term)+
}
infix_expr =  {
    #lhs = term ~ operator ~ #rhs = expr
}

operator = { "+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "==" | "!=" }

ident         = @{ !KEYWORD ~ ALPHABETIC ~ (ALPHABETIC | NUMBER | "_")* | quoted_indent }
quoted_indent = _{ "`" ~ (!"`" ~ ANY)+ ~ "`" }

literal = { string | number | boolean | char }

string  =  { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
char    =  { "'" ~ !"'" ~ ANY ~ "'" }
number  = _{ byte | float | integer }
integer = @{ "-"? ~ ASCII_DIGIT+ }
float   = @{
    "-"? ~ (ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* | ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+)
}
byte    = @{ "0x" ~ ASCII_HEX_DIGIT{1, 2} | "0b" ~ ASCII_BIN_DIGIT{0, 8} }
boolean = @{ "true" | "false" }

WHITESPACE = _{ " " | "\t" }
KEYWORD    = _{ "let" }
TERMINATE  = _{ LF | EOI | ";" }
MLF        = _{ (LF)* }
LF         = _{ "\n" | "\r" }
